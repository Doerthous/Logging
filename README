## A Simple Header File Only Logging Library

### Usage

#### The Simplest Usage

```C

#include "Logging.h"

int main()
{
    int b[] = {1,2,3,4,5,6,7,8,9,10};
    LOG_DEBUG("%d", 1);
    LOG_BUFFER("buff: ", b, 2);
    LOG_BUFFER("buff 2: ", b, 1);
    LOG_ERROR("error x %d", 1);
    LOG_ERROR("error ss");

    return 0;
}

// output:
1
buff: 01 02 
buff 2: 01 
error x 1
error ss

```


#### Other Features

- Logging Level
- Logging Direction (Console or File)
- Logging Format (Timestamp, Datetime, Module, File & Line)

##### Log Format

[level] [time] [datetime] module [file line]: message

##### Full Features Example

```C

// test.c:

#define LOGGING_LOG_LEVEL LOGGING_LOG_DEBUG_LEVEL
#define LOGGING_DEBUG_FLAG "Debug"
#define LOGGING_LOG_MODULE "ModuleA"
#define LOGGING_LOG_FILELINE
#define LOGGING_LOG_TIME
#define LOGGING_LOG_DATETIME
#define LOGGING_LOG_MAX_SIZE 1024
#define LOGGING_LOG_DIRECTION log_file
#include "Logging.h"

int main()
{
    FILE *log_file;

    log_file = fopen("log.txt", "w");
    int b[] = {1,2,3,4,5,6,7,8,9,10};
    LOG_DEBUG("%d", 1);
    LOG_BUFFER("buff: ", b, 10);
    LOG_BUFFER("buff 2: ", b, 10);
    LOG_ERROR("error x %d", 1);
    LOG_ERROR("error ss");
    return 0;
}


// log.txt:

Debug [1595003128.576167] [2020-06-18 00:25:28] ModuleA main.c(20): 1
Debug [1595003128.576592] [2020-06-18 00:25:28] ModuleA main.c(21) buff: 01 02
Debug [1595003128.576673] [2020-06-18 00:25:28] ModuleA main.c(22) buff 2: 01
[E] [1595003128.576740] [2020-06-18 00:25:28] ModuleA main.c(23): error x 1
[E] [1595003128.576804] [2020-06-18 00:25:28] ModuleA main.c(24): error ss

### TODO

- thread-safety

- multi-direction output